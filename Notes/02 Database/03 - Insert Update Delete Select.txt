01 - add constructor to service
    mport { InjectRepository } from "@nestjs/typeorm";
    import { Repository } from "typeorm";
    import { Injectable } from "@nestjs/common";

    constructor(
        @InjectRepository(User) protected readonly userReopsitory: Repository<User> 
    ){}


02 - create insertion function within the service

    async insertUser(body: any){
        return this.userReopsitory.save(body)
    }


03 - call the insertion funciotn in the controller
    import { BadRequestException, Body, Controller, Post, InternalServerErrorException } from '@nestjs/common';

    @Post('register')
    async register(@Body() body: any){
        if (body.password != body.password_confirm){
            throw new BadRequestException('Passwords do not mathc!');
        }

        try {
            await this.userService.newUser({
                first_name: body.first_name,
                last_name: body.last_name,
                email: body.email,
                password: body.password
            })

            return {
                message: "New user has been inserted successfully."
            }
        } catch (error) {
        // Handle the error here
            throw new InternalServerErrorException('Failed to inset new user', error);
        }
    }


04 - for update a user use this funciton in service:

    async editUser(body: any){
        const user = await this.userReopsitory.findOneBy({ email: body.email });
        if (!user){
            throw new NotFoundException(`User ${body.email} not found.`)
        }

        user.first_name = body.first_name
        user.last_name = body.last_name
        
        return this.userReopsitory.save(user);

    }


05 - now call it within your controller
    @Post('edit')
    async edit(@Body() body: any){
        try{

            await this.userService.editUser({
                email: body.email,
                first_name : body.first_name,
                last_name : body.last_name
            })

            return {
                message: "Your information has been editted successfully."
            }

        }catch(error){
            let msg = "Failed to edit user information"
            if (error.response.message){
                msg = error.response.message
            }
            throw new InternalServerErrorException(msg, error)
        }
    }


06 - for deleting a user declare this funcion in service:
    async deleteUser(email: string){
        const res = await this.userReopsitory.delete({email})
        if (res.affected === 0){
            throw new NotFoundException(`Unable to delete user ${email} `)
        }
        return res
    }


07 - and call it within the controller
    @Delete('delete')
    async delete(@Body() body: any){
        
        try{
            await this.userService.deleteUser(body.email)
            return { message: "User has beed deleted successfully."}
        }catch(error){
            let msg = "Failed to edit user information"
            if (error.response.message){
                msg = error.response.message
            }
            throw new InternalServerErrorException(msg, error)
        }
    }


